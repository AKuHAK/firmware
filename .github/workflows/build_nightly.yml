name: CMake

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        target: [SD2PSX, SD2PSXBF, SD2PSXlite, PMC+, PMCZero]
        debug: [ON, OFF]
        include:
          - debug: ON
            ext: -debug.uf2
          - debug: OFF
            ext: .uf2
          - target: SD2PSX
            filename: sd2psx
          - target: SD2PSXBF
            filename: sd2psxbf
          - target: SD2PSXlite
            filename: sd2psxlite
          - target: PMC+
            filename: pmc+
          - target: PMCZero
            filename: pmczero
    steps:
    - uses: actions/checkout@v3
      with:
         submodules: 'recursive'
         fetch-depth: '0'
    - run: |
        git fetch origin --tags --force
        TAG=$(git describe --tags --exact-match HEAD --exclude=latest --exclude=nightly) || true
        if [ $TAG ]
        then
          echo "SD2PSX_VERSION=${TAG}" >> $GITHUB_ENV
          echo "SD2PSX_RLS_TAG=latest" >> $GITHUB_ENV
          echo "${TAG}"
        else
          echo "SD2PSX_VERSION=nightly-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "SD2PSX_RLS_TAG=nightly" >> $GITHUB_ENV
          echo "nightly"
        fi

    - name: add build essential
      run: sudo apt update && sudo apt install -y build-essential gcc-arm-none-eabi
    - name: Build Project
      uses: threeal/cmake-action@v2.0.0
      with:
        options: |
          CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          DEBUG_USB_UART:BOOL=${{matrix.debug}}
          VARIANT=${{matrix.variant}}

#    - name: Configure CMake for Debug USB
#      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: cmake -B ${{github.workspace}}/build_usb -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDEBUG_USB_UART:BOOL=ON
#
#    - name: Build Debug USB
#      # Build your program with the given configuration
#      run: cmake --build ${{github.workspace}}/build_usb --config ${{env.BUILD_TYPE}}

#    - name: Rename Debug USB uf2
#      run: mv build_usb/sd2psx.uf2 build/sd2psx_usb_debug.uf2



    - name: Upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: build/${{ matrix.filename }}${{ matrix.ext }}
        asset_name: ${{ matrix.filename }}${{ matrix.ext }}
        asset_content_type: application/octet-stream

#    - name: Upload artifacts
#      uses: actions/upload-artifact@v3
#      with:
#        name: SD2PSX-${{ github.sha }}
#        path: |
#          build/*.uf2
#        

#    - uses: marvinpinto/action-automatic-releases@v1.2.1
#      if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') #only release on tag or master branch
#      with:
#        # GitHub secret token
#        title:  "${{ env.SD2PSX_VERSION }}"
#        repo_token: "${{ secrets.GITHUB_TOKEN }}"
#        automatic_release_tag: ${{ env.SD2PSX_RLS_TAG }}
#        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}        
#        # Assets to upload to the release
#        files: |
#          build/*.uf2
#